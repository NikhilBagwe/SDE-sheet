TWO SUM ================================================================================================================================================

OPTIMAL --------------------------------------------- TC = O(n), SC = O(n) -- Pairs may get repeated in 'ans' vector

int main()
{
    vector<int> v {7,3,1,4,8};
    int target = 9;
    unordered_map<int, int> m;
    pair<int,int> p;
    
    for(int i=0; i<v.size(); i++){
        m[v[i]]++;
    }
    
    for(int i=0; i<v.size(); i++){
        int x = target - v[i];
        if(m.find(x) != m.end()){
            p.first=v[i];
            p.second=x;
            break;
        }
    }
    
    cout<<p.first<<" "<<p.second;

    return 0;
}

ONLY UNIQUE PAIRS ARE PUSHED INTO THE 'ans' vector ----------------------------------------------------------------------------------------------

vector<pair<int,int>> twoSum(vector<int>& v, int target, int n)
{
    vector<pair<int,int>> ans;
    unordered_map<int,int> m;
    
    for(int i=0; i<n; i++){
        m[v[i]]++;
        
        // Suppose if target=4 and v[i]=2, then check if freq of '2' is greater than 1 or not
        if(v[i] == target-v[i]){
            
            if(m[v[i]] > 1){
                ans.push_back({v[i], v[i]});
                // on adding to ans vector, decrement the freq by 2
            	m[v[i]] -= 2;
            }
        }
        
        else{
            // Check whether both 'v[i]' and 'target-v[i]' freq is atleast one 
            if(m[v[i]] > 0 && m[target-v[i]] > 0){
                ans.push_back({v[i], target-v[i]});
                m[v[i]]-=1;
                m[target-v[i]]-=1;
            }
        } 
    }
    
    if(ans.size() == 0)
	{
		ans.push_back({-1, -1});
	}
    
    return ans;
}

Longest Consecutive sequence ============================================================================================================================

BRUTE ------------------------------------------------------ n^2
#include <bits/stdc++.h>

using namespace std;
bool findNum(int start, int arr[]){
    for(int i=0; i<6; i++){
        if(arr[i] == start){
            return true;
        }
    }
    return false;
}
int main()
{
    int a[] = {5,6,10,13,7,12};
    int ans=0;
    for(int i=0; i<6; i++){
        int start=a[i];
        while(findNum(start, a)){
            start++;
        }
        
        ans=max(ans,start-a[i]);
    }

    cout<<ans;
    return 0;
}

OPTIMAL -------------------------------------------------------------- O(nlogn)

int main()
{
    vector<int> a {5,11,10,9,7,1};
    int sequencelen = 1;
    int maxlen = 1;
    sort(a.begin(), a.end());
    // 5,7,9,10,11,12
    // Stand on a number and check whther the prev number is 
    // less than the current no. by 1 
    for(int i=1; i<a.size(); i++){
        if(a[i] == a[i-1]+1){
            sequencelen++;
        }
        else if(a[i] == a[i-1]) continue;
        else{
            sequencelen = 1;
        }
        maxlen = max(sequencelen, maxlen);
    }
    

    cout<<maxlen;
    return 0;
}

BETTER ----------------------------------------------------------- O(N)

int main()
{
    vector<int> a {5,11,10,9,7,12};
    int ans = 1;
    unordered_set<int> box;
    
    for(int i=0; i<a.size(); i++){
        box.insert(a[i]);
    }
    
    for(int i=0; i<a.size(); i++){
        int start = a[i];
        
        // check whether prev number exists or not and skip the iteration
        if(box.find(start-1) != box.end()) continue;
        
        // this while loop runs very few times
        while(box.find(start) != box.end()){
            start++;
        }
        
        ans = max(ans, start-a[i]);
    }

    cout<<ans;
    return 0;
}

MAJORITY ELEMENT =============================================================================================================================================

BRUTE ---------------------------------------------------------------- TC = O(n), SC = O(n)

int main()
{
    vector<int> a {2,4,8,8,2,8,8};
    
    unordered_map<int,int> mp;
    
    for(int i=0; i<7; i++){
        mp[a[i]]++;
        if(mp[a[i]] >= 7/2) {
            cout<<a[i];
            break;
        }
    }
    
    return 0;
}

OPTIMAL ----------------------------------------------------- MOORE'S VOTING ALGO

int main()
{
    vector<int> a {2,4,2,8,2,2};
    int candidate = a[0];
    int votes = 1;
    for(int i=1; i<a.size(); i++){
        if(a[i] == candidate){
            votes++;
        }
        else if(a[i] != candidate){
            votes--;
        }
        
        if(votes == 0){
            candidate = a[i];
            votes = 1;
        }
    }
    
    // count the frequency of candidate in array 
    int freq = 0;
    for(int i=0; i<a.size(); i++){
        if(a[i] == candidate) freq++;
    }
    
    if(freq > a.size()/2) cout<<candidate;
    return 0;
}

MAJORITY ELEMENT 2 =============================================================================================================================================

OPTIMAL ---------------------------------------------------------------------------------------------- TC = O(n), SC = O(n)

#include<bits/stdc++.h>
vector<int> majorityElementII(vector<int> &a)
{
    // Write your code here.
	int n = a.size();
    unordered_map<int, int> m;
    vector<int> ans;
    
    for(int i=0; i<n; i++){
        m[a[i]]++;
        if(m[a[i]] > n/3){
            ans.push_back(a[i]);
            m[a[i]]-=3;
        }
    }
    
    return ans;
}

BETTER ------------------------------------------------------------------------------------------------ TC=O(N) ----- Extended MOORE'S VOTING ALGO

#include <bits/stdc++.h>
using namespace std;

int main()
{
    vector<int> a {1,1,1,8,8,5,5,5};
    int num1 = -1, num2 = -1;
    int count1 = 0, count2 = 0;
    
    for(int i=0; i<a.size(); i++){
        if(a[i] == num1){
            count1++;
        }
        else if(a[i] == num2){
            count2++;
        }
        else if(count1 == 0){
            num1 = a[i];
            count1 = 1;
        }
        else if(count2 == 0){
            num2 = a[i];
            count2 = 1;
        }
        else{
            count1--;
            count2--;
        }
    }
    
    int f1=0, f2=0;
    
    for(int i=0; i<a.size(); i++){
        if(a[i] == num1) f1++;
    }
    for(int i=0; i<a.size(); i++){
        if(a[i] == num2) f2++;
    }
    
    int n = a.size();
    if(f1 > n/3) cout<<num1<<endl;
    if(f2 > n/3) cout<<num2<<endl;

    return 0;
}