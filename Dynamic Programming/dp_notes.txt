Dynamic Programming Notes: 

* DP is enhanced recursion.
* DP = Recursion + Storage (memoization)
* Recursion is parent of DP.
* Whenever a recursive function is making 2 calls i.e we have 2 choices, there is a proability that we can apply DP there. 

-> How to identify a DP problem :

1. All methods used to find a recursive problem are also applicable for DP.
2. The problem asks you to find something OPTIMAL. eg: maximum, minimum, largest, etc

-> Approach to a DP problem: --------------------------------------------------------------------------------------------------------------------------------------------

1. Write it's RECURSIVE function.
2. Use memoization.
3. And then if you want than make Tabulation DP table i.e Top-Down

=> 0 1 Knapsack Problem : ------------------------------------------------------------------------------------------------------------------------------------------------

- Types :
* Fractional knapsack - Greedy approach
  eg : Suppose if the capacity of bag is 10kg and out of it 9kg is full and we have a item of weight 2kg, than we can put fraction of item i.e 1kg into bag
  
* 0/1 knapsack - DP
  eg : From above example, here we can either remove an item from bag to make it 8kg than put our 2kg item in it, or don't put the 2kg item at all in the bag
  0 -> We don't put the item at all in the bag
  1 -> We put the item into the bag
  
* Unbounded knapsack - we can put one item multiple times in the bag.

Similar problem with minor changes:
1. Subset sum
2. Equal sum partition
3. Count of subset sum
4. Minimum subset sum difference
5. Target sum
6. No. of subset with given difference

=> Tabulation - Bottom up : -------------------------------------------------------------------------------------------------------------------------------------------

* In this approach we want to eliminate the recursive calls that we made in case of memoization.
* We will create a matrix and store values into it iteratively and only with the help of that table we will find the answer.

===================================================== SANKET SINGH - playlist ==================================================================================

-> Paradigms of Algorithms : 

1. Brute force
2. Divide and Conquer
3. Greedy 
4. Dynamic Programming

==>  Dynamic Programming -------------------------------------------------

* It is a mathematical / programming technique which is used as an optimization method.
* It focuses on the fact that if we have already computed something, then we should not recompute it.

==> Memoization : TOP-DOWN DP ---------------------------------------------------------

* Memoization or memoisation is an optimization technique used primarily to speed up computer programs by storing the results of expensive function calls and returning the 
  cached/stored result when the same inputs occur again.
* Helps to improve performance of algorithm.
* Top-down approach focuses on breaking down a big problem into smaller and understandable chunks.
* Normally in the Time complexity is exponential using only Recursion. eg: In fibonacci series - TC =  O(2^n)
* In DP, Time complexity becomes linear. eg: In fibonacci series - TC =  O(n) using DP.
* Space complexity = Recursive call stack + Memo array => O(n)
  Recursive call stack -> Maximum depth your recursive tree goes into which is O(n)

==> Tabulation : BOTTOM UP --------------------------------------------------------------

* In Tabulation,  we go from smaller subproblem to bigger subproblem.
* Smaller sub problems are already computed before solving the bigger sub problem.
  eg: In fibonacci, even before coming to fibo(5), fibo(3) and fibo(4) will be already computed unlike the Memoization where we 1st come to f(5) then go down to compute f(4)
* We 1st compute the trivial/smallest sub problem
* Tabulation is an ITERATIVE approach.

==> Memoization vs Tabulation --------------------------------------------------------------------------------------------------------

- Memoization has constraints of -> Stack space causing Stackoverflow as call stack has a certain capacity
- Memoization is generally more intuitive to implement especially when we don't know the solution to subproblems, whereas tabulation requires us to know the solutions, or bottom, in advance, in order to build our way up.
- If the original problem requires all subproblems to be solved, tabulation usually outperformes memoization by a constant factor. This is because tabulation has no overhead for recursion and can use a preallocated array

