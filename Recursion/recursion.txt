Why use Recursion ?
-> It helps us in solving bigger/complex problems in a simple way.
   You can convert recursion solutions into iterative solutions (to get more optimized solution) and vice versa.
   NOTE : Space complexity is not constant because of recursive calls.


How a function is executed ?
-> When the function is called , a certain memory is allocated to it and it is pushed into stack also it starts executing.
   While the function is not finished executing it will remain in the stack.
   When a function finishes executing, it is removed from the stack an the flow of program is restored to where it was called.
   

Base condition :
- It is used to stop the recursive function call.
- Base condition is represented by answers we already know, eg: fib(0)=0, fib(1)=1 in fibonacci series
- Prevents the function from going into infinite call loop.
- As we know every function call takes some memory in the stack, so does recursive calls do.

-> NO BASE CONDITION = Function calls will keep happening, and stack will be filled again and again and at some point the stack memory of computer will exceed, leading to 
   " Stackoverflow error ".


-> RECURRENCE RELATION :
- When you write recursion in a formula it is called recurrence relation.
- eg: fibonacci number -> fib(n) = fib(n-1) + fib(n-2)

====================================================================== Aditya verma playlist ================================================================

- In recursion, input automatically gets smaller based on the decision taken. 
- In recursion we will be given some choices, and you have to take the decision based on the available choices.
- In a problem, when we have choices an decisions to make means we can apply recursion.

- RECURSSIVE TREE using IP/OP method:

* No. of branches in a tree == no. of choices
* When you move to the next level of tree, you take a decision between the choices available and thus, the i/p will become smaller automatically.
  eg: you pick 'a' or not pick 'a'
* You will get your answers in the leaf node when your i/p becomes empty.

-> Ways to approach a recursion problem:
1. Recurssive tree - IP/OP method (when you know what decision to take on the choices you have) - eg. subset problem
2. Base case - Induction - Hypothesis (Make i/p smaller) - used in trees and linked list problems
3. Choice diagram (DP)

-> BASE CASE - HYPOTHESIS - INDUCTION METHOD : 

void printNum(int n){
    // Base condition -> smallest valid input
    if(n==1){
        cout<<n<<" ";
        return;
    }
    
    // Hypothesis -> Tells what your function is going to do. eg. printNum(n-1) is going to print numbers from 1 to n-1
    printNum(n-1);
    
    // Induction -> prints the remaining elements. eg. in above step no. are printed upto n-1, so n remains. That 'n' is printed by induction step
    cout<<n<<" ";
}






